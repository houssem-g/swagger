{"ast":null,"code":"(function () {\n  var unique_id,\n    extend = function (child, parent) {\n      for (var key in parent) {\n        if (hasProp.call(parent, key)) child[key] = parent[key];\n      }\n      function ctor() {\n        this.constructor = child;\n      }\n      ctor.prototype = parent.prototype;\n      child.prototype = new ctor();\n      child.__super__ = parent.prototype;\n      return child;\n    },\n    hasProp = {}.hasOwnProperty;\n  unique_id = 0;\n  this.Node = function () {\n    function Node(tag, value, start_mark, end_mark) {\n      this.tag = tag;\n      this.value = value;\n      this.start_mark = start_mark;\n      this.end_mark = end_mark;\n      this.unique_id = \"node_\" + unique_id++;\n    }\n    return Node;\n  }();\n  this.ScalarNode = function (superClass) {\n    extend(ScalarNode, superClass);\n    ScalarNode.prototype.id = 'scalar';\n    function ScalarNode(tag, value, start_mark, end_mark, style) {\n      this.tag = tag;\n      this.value = value;\n      this.start_mark = start_mark;\n      this.end_mark = end_mark;\n      this.style = style;\n      ScalarNode.__super__.constructor.apply(this, arguments);\n    }\n    return ScalarNode;\n  }(this.Node);\n  this.CollectionNode = function (superClass) {\n    extend(CollectionNode, superClass);\n    function CollectionNode(tag, value, start_mark, end_mark, flow_style) {\n      this.tag = tag;\n      this.value = value;\n      this.start_mark = start_mark;\n      this.end_mark = end_mark;\n      this.flow_style = flow_style;\n      CollectionNode.__super__.constructor.apply(this, arguments);\n    }\n    return CollectionNode;\n  }(this.Node);\n  this.SequenceNode = function (superClass) {\n    extend(SequenceNode, superClass);\n    function SequenceNode() {\n      return SequenceNode.__super__.constructor.apply(this, arguments);\n    }\n    SequenceNode.prototype.id = 'sequence';\n    return SequenceNode;\n  }(this.CollectionNode);\n  this.MappingNode = function (superClass) {\n    extend(MappingNode, superClass);\n    function MappingNode() {\n      return MappingNode.__super__.constructor.apply(this, arguments);\n    }\n    MappingNode.prototype.id = 'mapping';\n    return MappingNode;\n  }(this.CollectionNode);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}