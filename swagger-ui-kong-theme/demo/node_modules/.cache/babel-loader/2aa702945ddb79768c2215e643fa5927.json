{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belga\\\\Desktop\\\\houssem\\\\learning\\\\test\\\\swagger\\\\swagger-ui-kong-theme\\\\demo\\\\src\\\\SwaggerLoader.js\";\nimport React from 'react';\nimport SwaggerUI from 'swagger-ui';\nimport SwaggerParser from 'swagger-parser';\nimport YAML from 'yaml-js';\nimport 'swagger-ui/dist/swagger-ui.css';\nimport { SwaggerUIKongTheme } from 'swagger-ui-kong-theme';\nasync function loadSpec(url) {\n  try {\n    return parseSpec(await (await fetch(url)).text());\n  } catch (e) {\n    return e;\n  }\n}\nfunction parseSpec(contents) {\n  let parsedSpec; // Set empty varible to hold spec\n  let errorArray = []; // Set empty array to hold any errors\n\n  // Try to parse spec as JSON\n  // If parse fails push json error message into errors array\n  try {\n    parsedSpec = JSON.parse(contents);\n  } catch (jsonError) {\n    errorArray.push('Error trying to parse JSON:<br>' + jsonError);\n\n    // Try to parse spec as YAML\n    // If parse fails push yaml error message into errors array\n    try {\n      parsedSpec = YAML.load(contents);\n    } catch (yamlError) {\n      errorArray.push('Error trying to parse YAML:<br>' + yamlError);\n    }\n  }\n  SwaggerParser.validate(parsedSpec, function (err, api) {\n    if (err) {\n      console.error(err);\n    }\n  });\n\n  // If parsed is undefined return errors, else return the parsed spec file\n  return parsedSpec === undefined ? errorArray : parsedSpec;\n}\nlet swaggerUIOptions = {\n  dom_id: '#ui-wrapper',\n  // Determine what element to load swagger ui\n  docExpansion: 'list',\n  deepLinking: true,\n  // Enables dynamic deep linking for tags and operations\n  filter: true,\n  presets: [SwaggerUI.presets.apis, SwaggerUI.SwaggerUIStandalonePreset],\n  plugins: [SwaggerUIKongTheme, SwaggerUI.plugins.DownloadUrl],\n  layout: 'KongLayout'\n};\nclass SwaggerLoader extends React.Component {\n  async componentDidMount() {\n    const {\n      match: {\n        params\n      }\n    } = this.props;\n    if (params.specUrl) {\n      const url = decodeURIComponent(params.specUrl);\n      if (params.config) {\n        // eslint-disable-next-line no-eval\n        swaggerUIOptions = {\n          ...swaggerUIOptions,\n          ...JSON.parse(decodeURIComponent(params.config))\n        };\n      }\n      swaggerUIOptions.spec = await loadSpec(url); // Define data to be used\n      SwaggerUI(swaggerUIOptions);\n    } else {\n      console.log('failed to load');\n    }\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ui-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    });\n  }\n}\nexport default SwaggerLoader;","map":{"version":3,"names":["React","SwaggerUI","SwaggerParser","YAML","SwaggerUIKongTheme","loadSpec","url","parseSpec","fetch","text","e","contents","parsedSpec","errorArray","JSON","parse","jsonError","push","load","yamlError","validate","err","api","console","error","undefined","swaggerUIOptions","dom_id","docExpansion","deepLinking","filter","presets","apis","SwaggerUIStandalonePreset","plugins","DownloadUrl","layout","SwaggerLoader","Component","componentDidMount","match","params","props","specUrl","decodeURIComponent","config","spec","log","render"],"sources":["C:/Users/belga/Desktop/houssem/learning/test/swagger/swagger-ui-kong-theme/demo/src/SwaggerLoader.js"],"sourcesContent":["import React from 'react';\r\nimport SwaggerUI from 'swagger-ui'\r\nimport SwaggerParser from 'swagger-parser'\r\nimport YAML from 'yaml-js'\r\nimport 'swagger-ui/dist/swagger-ui.css';\r\nimport { SwaggerUIKongTheme } from 'swagger-ui-kong-theme'\r\n\r\nasync function loadSpec(url) {\r\n  try {\r\n    return parseSpec(await( await fetch(url) ).text())\r\n  } catch(e) {\r\n    return e\r\n  }\r\n}\r\n\r\nfunction parseSpec (contents) {\r\n  let parsedSpec // Set empty varible to hold spec\r\n  let errorArray = [] // Set empty array to hold any errors\r\n\r\n  // Try to parse spec as JSON\r\n  // If parse fails push json error message into errors array\r\n  try {\r\n    parsedSpec = JSON.parse(contents)\r\n  } catch (jsonError) {\r\n    errorArray.push('Error trying to parse JSON:<br>' + jsonError)\r\n\r\n    // Try to parse spec as YAML\r\n    // If parse fails push yaml error message into errors array\r\n    try {\r\n      parsedSpec = YAML.load(contents)\r\n    } catch (yamlError) {\r\n      errorArray.push('Error trying to parse YAML:<br>' + yamlError)\r\n    }\r\n  }\r\n\r\n  SwaggerParser.validate(parsedSpec, function (err, api) {\r\n    if (err) {\r\n      console.error(err)\r\n    }\r\n  })\r\n\r\n  // If parsed is undefined return errors, else return the parsed spec file\r\n  return parsedSpec === undefined ? errorArray : parsedSpec\r\n}\r\n\r\nlet swaggerUIOptions = {\r\n\r\n  dom_id: '#ui-wrapper', // Determine what element to load swagger ui\r\n  docExpansion: 'list',\r\n  deepLinking: true, // Enables dynamic deep linking for tags and operations\r\n  filter: true,\r\n  presets: [\r\n    SwaggerUI.presets.apis,\r\n    SwaggerUI.SwaggerUIStandalonePreset\r\n  ],\r\n  plugins: [\r\n    SwaggerUIKongTheme,\r\n    SwaggerUI.plugins.DownloadUrl\r\n  ],\r\n  layout: 'KongLayout',\r\n}\r\n\r\n\r\nclass SwaggerLoader extends React.Component{\r\n  async componentDidMount() {\r\n    const { match: { params } } = this.props;\r\n    if (params.specUrl) {\r\n      const url = decodeURIComponent(params.specUrl)\r\n      if (params.config) {\r\n        // eslint-disable-next-line no-eval\r\n        swaggerUIOptions = {\r\n          ...swaggerUIOptions,\r\n          ...JSON.parse(decodeURIComponent(params.config))\r\n        }\r\n      }\r\n      swaggerUIOptions.spec = await loadSpec(url) // Define data to be used\r\n      SwaggerUI(swaggerUIOptions)\r\n    } else {\r\n      console.log('failed to load')\r\n    }\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"ui-wrapper\">\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default SwaggerLoader;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAO,gCAAgC;AACvC,SAASC,kBAAkB,QAAQ,uBAAuB;AAE1D,eAAeC,QAAQ,CAACC,GAAG,EAAE;EAC3B,IAAI;IACF,OAAOC,SAAS,CAAC,MAAK,CAAE,MAAMC,KAAK,CAACF,GAAG,CAAC,EAAGG,IAAI,EAAE,CAAC;EACpD,CAAC,CAAC,OAAMC,CAAC,EAAE;IACT,OAAOA,CAAC;EACV;AACF;AAEA,SAASH,SAAS,CAAEI,QAAQ,EAAE;EAC5B,IAAIC,UAAU,EAAC;EACf,IAAIC,UAAU,GAAG,EAAE,EAAC;;EAEpB;EACA;EACA,IAAI;IACFD,UAAU,GAAGE,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC;EACnC,CAAC,CAAC,OAAOK,SAAS,EAAE;IAClBH,UAAU,CAACI,IAAI,CAAC,iCAAiC,GAAGD,SAAS,CAAC;;IAE9D;IACA;IACA,IAAI;MACFJ,UAAU,GAAGT,IAAI,CAACe,IAAI,CAACP,QAAQ,CAAC;IAClC,CAAC,CAAC,OAAOQ,SAAS,EAAE;MAClBN,UAAU,CAACI,IAAI,CAAC,iCAAiC,GAAGE,SAAS,CAAC;IAChE;EACF;EAEAjB,aAAa,CAACkB,QAAQ,CAACR,UAAU,EAAE,UAAUS,GAAG,EAAEC,GAAG,EAAE;IACrD,IAAID,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;IACpB;EACF,CAAC,CAAC;;EAEF;EACA,OAAOT,UAAU,KAAKa,SAAS,GAAGZ,UAAU,GAAGD,UAAU;AAC3D;AAEA,IAAIc,gBAAgB,GAAG;EAErBC,MAAM,EAAE,aAAa;EAAE;EACvBC,YAAY,EAAE,MAAM;EACpBC,WAAW,EAAE,IAAI;EAAE;EACnBC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE,CACP9B,SAAS,CAAC8B,OAAO,CAACC,IAAI,EACtB/B,SAAS,CAACgC,yBAAyB,CACpC;EACDC,OAAO,EAAE,CACP9B,kBAAkB,EAClBH,SAAS,CAACiC,OAAO,CAACC,WAAW,CAC9B;EACDC,MAAM,EAAE;AACV,CAAC;AAGD,MAAMC,aAAa,SAASrC,KAAK,CAACsC,SAAS;EACzC,MAAMC,iBAAiB,GAAG;IACxB,MAAM;MAAEC,KAAK,EAAE;QAAEC;MAAO;IAAE,CAAC,GAAG,IAAI,CAACC,KAAK;IACxC,IAAID,MAAM,CAACE,OAAO,EAAE;MAClB,MAAMrC,GAAG,GAAGsC,kBAAkB,CAACH,MAAM,CAACE,OAAO,CAAC;MAC9C,IAAIF,MAAM,CAACI,MAAM,EAAE;QACjB;QACAnB,gBAAgB,GAAG;UACjB,GAAGA,gBAAgB;UACnB,GAAGZ,IAAI,CAACC,KAAK,CAAC6B,kBAAkB,CAACH,MAAM,CAACI,MAAM,CAAC;QACjD,CAAC;MACH;MACAnB,gBAAgB,CAACoB,IAAI,GAAG,MAAMzC,QAAQ,CAACC,GAAG,CAAC,EAAC;MAC5CL,SAAS,CAACyB,gBAAgB,CAAC;IAC7B,CAAC,MAAM;MACLH,OAAO,CAACwB,GAAG,CAAC,gBAAgB,CAAC;IAC/B;EAEF;EACAC,MAAM,GAAG;IACP,oBACE;MAAK,EAAE,EAAC,YAAY;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACd;EAEV;AACF;AAGA,eAAeX,aAAa"},"metadata":{},"sourceType":"module"}