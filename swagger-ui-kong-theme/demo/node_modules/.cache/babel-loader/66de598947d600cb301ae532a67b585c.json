{"ast":null,"code":"(function () {\n  var MarkedYAMLError,\n    events,\n    tokens,\n    extend = function (child, parent) {\n      for (var key in parent) {\n        if (hasProp.call(parent, key)) child[key] = parent[key];\n      }\n      function ctor() {\n        this.constructor = child;\n      }\n      ctor.prototype = parent.prototype;\n      child.prototype = new ctor();\n      child.__super__ = parent.prototype;\n      return child;\n    },\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice;\n  events = require('./events');\n  MarkedYAMLError = require('./errors').MarkedYAMLError;\n  tokens = require('./tokens');\n  this.ParserError = function (superClass) {\n    extend(ParserError, superClass);\n    function ParserError() {\n      return ParserError.__super__.constructor.apply(this, arguments);\n    }\n    return ParserError;\n  }(MarkedYAMLError);\n  this.Parser = function () {\n    var DEFAULT_TAGS;\n    DEFAULT_TAGS = {\n      '!': '!',\n      '!!': 'tag:yaml.org,2002:'\n    };\n    function Parser() {\n      this.current_event = null;\n      this.yaml_version = null;\n      this.tag_handles = {};\n      this.states = [];\n      this.marks = [];\n      this.state = 'parse_stream_start';\n    }\n\n    /*\n    Reset the state attributes.\n     */\n\n    Parser.prototype.dispose = function () {\n      this.states = [];\n      return this.state = null;\n    };\n\n    /*\n    Check the type of the next event.\n     */\n\n    Parser.prototype.check_event = function () {\n      var choice, choices, i, len;\n      choices = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (this.current_event === null) {\n        if (this.state != null) {\n          this.current_event = this[this.state]();\n        }\n      }\n      if (this.current_event !== null) {\n        if (choices.length === 0) {\n          return true;\n        }\n        for (i = 0, len = choices.length; i < len; i++) {\n          choice = choices[i];\n          if (this.current_event instanceof choice) {\n            return true;\n          }\n        }\n      }\n      return false;\n    };\n\n    /*\n    Get the next event.\n     */\n\n    Parser.prototype.peek_event = function () {\n      if (this.current_event === null && this.state != null) {\n        this.current_event = this[this.state]();\n      }\n      return this.current_event;\n    };\n\n    /*\n    Get the event and proceed further.\n     */\n\n    Parser.prototype.get_event = function () {\n      var event;\n      if (this.current_event === null && this.state != null) {\n        this.current_event = this[this.state]();\n      }\n      event = this.current_event;\n      this.current_event = null;\n      return event;\n    };\n\n    /*\n    Parse the stream start.\n     */\n\n    Parser.prototype.parse_stream_start = function () {\n      var event, token;\n      token = this.get_token();\n      event = new events.StreamStartEvent(token.start_mark, token.end_mark);\n      this.state = 'parse_implicit_document_start';\n      return event;\n    };\n\n    /*\n    Parse an implicit document.\n     */\n\n    Parser.prototype.parse_implicit_document_start = function () {\n      var end_mark, event, start_mark, token;\n      if (!this.check_token(tokens.DirectiveToken, tokens.DocumentStartToken, tokens.StreamEndToken)) {\n        this.tag_handles = DEFAULT_TAGS;\n        token = this.peek_token();\n        start_mark = end_mark = token.start_mark;\n        event = new events.DocumentStartEvent(start_mark, end_mark, false);\n        this.states.push('parse_document_end');\n        this.state = 'parse_block_node';\n        return event;\n      } else {\n        return this.parse_document_start();\n      }\n    };\n\n    /*\n    Parse an explicit document.\n     */\n\n    Parser.prototype.parse_document_start = function () {\n      var end_mark, event, ref, start_mark, tags, token, version;\n      while (this.check_token(tokens.DocumentEndToken)) {\n        this.get_token();\n      }\n      if (!this.check_token(tokens.StreamEndToken)) {\n        start_mark = this.peek_token().start_mark;\n        ref = this.process_directives(), version = ref[0], tags = ref[1];\n        if (!this.check_token(tokens.DocumentStartToken)) {\n          throw new exports.ParserError(\"expected '<document start>', but found \" + this.peek_token().id, this.peek_token().start_mark);\n        }\n        token = this.get_token();\n        end_mark = token.end_mark;\n        event = new events.DocumentStartEvent(start_mark, end_mark, true, version, tags);\n        this.states.push('parse_document_end');\n        this.state = 'parse_document_content';\n      } else {\n        token = this.get_token();\n        event = new events.StreamEndEvent(token.start_mark, token.end_mark);\n        if (this.states.length !== 0) {\n          throw new Error('assertion error, states should be empty');\n        }\n        if (this.marks.length !== 0) {\n          throw new Error('assertion error, marks should be empty');\n        }\n        this.state = null;\n      }\n      return event;\n    };\n\n    /*\n    Parse the document end.\n     */\n\n    Parser.prototype.parse_document_end = function () {\n      var end_mark, event, explicit, start_mark, token;\n      token = this.peek_token();\n      start_mark = end_mark = token.start_mark;\n      explicit = false;\n      if (this.check_token(tokens.DocumentEndToken)) {\n        token = this.get_token();\n        end_mark = token.end_mark;\n        explicit = true;\n      }\n      event = new events.DocumentEndEvent(start_mark, end_mark, explicit);\n      this.state = 'parse_document_start';\n      return event;\n    };\n    Parser.prototype.parse_document_content = function () {\n      var event;\n      if (this.check_token(tokens.DirectiveToken, tokens.DocumentStartToken, tokens.DocumentEndToken, tokens.StreamEndToken)) {\n        event = this.process_empty_scalar(this.peek_token().start_mark);\n        this.state = this.states.pop();\n        return event;\n      } else {\n        return this.parse_block_node();\n      }\n    };\n    Parser.prototype.process_directives = function () {\n      var handle, major, minor, prefix, ref, ref1, ref2, tag_handles_copy, token, value;\n      this.yaml_version = null;\n      this.tag_handles = {};\n      while (this.check_token(tokens.DirectiveToken)) {\n        token = this.get_token();\n        if (token.name === 'YAML') {\n          if (this.yaml_version !== null) {\n            throw new exports.ParserError(null, null, 'found duplicate YAML directive', token.start_mark);\n          }\n          ref = token.value, major = ref[0], minor = ref[1];\n          if (major !== 1) {\n            throw new exports.ParserError(null, null, 'found incompatible YAML document (version 1.* is required)', token.start_mark);\n          }\n          this.yaml_version = token.value;\n        } else if (token.name === 'TAG') {\n          ref1 = token.value, handle = ref1[0], prefix = ref1[1];\n          if (handle in this.tag_handles) {\n            throw new exports.ParserError(null, null, \"duplicate tag handle \" + handle, token.start_mark);\n          }\n          this.tag_handles[handle] = prefix;\n        }\n      }\n      tag_handles_copy = null;\n      ref2 = this.tag_handles;\n      for (handle in ref2) {\n        if (!hasProp.call(ref2, handle)) continue;\n        prefix = ref2[handle];\n        if (tag_handles_copy == null) {\n          tag_handles_copy = {};\n        }\n        tag_handles_copy[handle] = prefix;\n      }\n      value = [this.yaml_version, tag_handles_copy];\n      for (handle in DEFAULT_TAGS) {\n        if (!hasProp.call(DEFAULT_TAGS, handle)) continue;\n        prefix = DEFAULT_TAGS[handle];\n        if (!(prefix in this.tag_handles)) {\n          this.tag_handles[handle] = prefix;\n        }\n      }\n      return value;\n    };\n    Parser.prototype.parse_block_node = function () {\n      return this.parse_node(true);\n    };\n    Parser.prototype.parse_flow_node = function () {\n      return this.parse_node();\n    };\n    Parser.prototype.parse_block_node_or_indentless_sequence = function () {\n      return this.parse_node(true, true);\n    };\n    Parser.prototype.parse_node = function (block, indentless_sequence) {\n      var anchor, end_mark, event, handle, implicit, node, start_mark, suffix, tag, tag_mark, token;\n      if (block == null) {\n        block = false;\n      }\n      if (indentless_sequence == null) {\n        indentless_sequence = false;\n      }\n      if (this.check_token(tokens.AliasToken)) {\n        token = this.get_token();\n        event = new events.AliasEvent(token.value, token.start_mark, token.end_mark);\n        this.state = this.states.pop();\n      } else {\n        anchor = null;\n        tag = null;\n        start_mark = end_mark = tag_mark = null;\n        if (this.check_token(tokens.AnchorToken)) {\n          token = this.get_token();\n          start_mark = token.start_mark;\n          end_mark = token.end_mark;\n          anchor = token.value;\n          if (this.check_token(tokens.TagToken)) {\n            token = this.get_token();\n            tag_mark = token.start_mark;\n            end_mark = token.end_mark;\n            tag = token.value;\n          }\n        } else if (this.check_token(tokens.TagToken)) {\n          token = this.get_token();\n          start_mark = tag_mark = token.start_mark;\n          end_mark = token.end_mark;\n          tag = token.value;\n          if (this.check_token(tokens.AnchorToken)) {\n            token = this.get_token();\n            end_mark = token.end_mark;\n            anchor = token.value;\n          }\n        }\n        if (tag !== null) {\n          handle = tag[0], suffix = tag[1];\n          if (handle !== null) {\n            if (!(handle in this.tag_handles)) {\n              throw new exports.ParserError('while parsing a node', start_mark, \"found undefined tag handle \" + handle, tag_mark);\n            }\n            tag = this.tag_handles[handle] + suffix;\n          } else {\n            tag = suffix;\n          }\n        }\n        if (start_mark === null) {\n          start_mark = end_mark = this.peek_token().start_mark;\n        }\n        event = null;\n        implicit = tag === null || tag === '!';\n        if (indentless_sequence && this.check_token(tokens.BlockEntryToken)) {\n          end_mark = this.peek_token().end_mark;\n          event = new events.SequenceStartEvent(anchor, tag, implicit, start_mark, end_mark);\n          this.state = 'parse_indentless_sequence_entry';\n        } else {\n          if (this.check_token(tokens.ScalarToken)) {\n            token = this.get_token();\n            end_mark = token.end_mark;\n            if (token.plain && tag === null || tag === '!') {\n              implicit = [true, false];\n            } else if (tag === null) {\n              implicit = [false, true];\n            } else {\n              implicit = [false, false];\n            }\n            event = new events.ScalarEvent(anchor, tag, implicit, token.value, start_mark, end_mark, token.style);\n            this.state = this.states.pop();\n          } else if (this.check_token(tokens.FlowSequenceStartToken)) {\n            end_mark = this.peek_token().end_mark;\n            event = new events.SequenceStartEvent(anchor, tag, implicit, start_mark, end_mark, true);\n            this.state = 'parse_flow_sequence_first_entry';\n          } else if (this.check_token(tokens.FlowMappingStartToken)) {\n            end_mark = this.peek_token().end_mark;\n            event = new events.MappingStartEvent(anchor, tag, implicit, start_mark, end_mark, true);\n            this.state = 'parse_flow_mapping_first_key';\n          } else if (block && this.check_token(tokens.BlockSequenceStartToken)) {\n            end_mark = this.peek_token().end_mark;\n            event = new events.SequenceStartEvent(anchor, tag, implicit, start_mark, end_mark, false);\n            this.state = 'parse_block_sequence_first_entry';\n          } else if (block && this.check_token(tokens.BlockMappingStartToken)) {\n            end_mark = this.peek_token().end_mark;\n            event = new events.MappingStartEvent(anchor, tag, implicit, start_mark, end_mark, false);\n            this.state = 'parse_block_mapping_first_key';\n          } else if (anchor !== null || tag !== null) {\n            event = new events.ScalarEvent(anchor, tag, [implicit, false], '', start_mark, end_mark);\n            this.state = this.states.pop();\n          } else {\n            if (block) {\n              node = 'block';\n            } else {\n              node = 'flow';\n            }\n            token = this.peek_token();\n            throw new exports.ParserError(\"while parsing a \" + node + \" node\", start_mark, \"expected the node content, but found \" + token.id, token.start_mark);\n          }\n        }\n      }\n      return event;\n    };\n    Parser.prototype.parse_block_sequence_first_entry = function () {\n      var token;\n      token = this.get_token();\n      this.marks.push(token.start_mark);\n      return this.parse_block_sequence_entry();\n    };\n    Parser.prototype.parse_block_sequence_entry = function () {\n      var event, token;\n      if (this.check_token(tokens.BlockEntryToken)) {\n        token = this.get_token();\n        if (!this.check_token(tokens.BlockEntryToken, tokens.BlockEndToken)) {\n          this.states.push('parse_block_sequence_entry');\n          return this.parse_block_node();\n        } else {\n          this.state = 'parse_block_sequence_entry';\n          return this.process_empty_scalar(token.end_mark);\n        }\n      }\n      if (!this.check_token(tokens.BlockEndToken)) {\n        token = this.peek_token();\n        throw new exports.ParserError('while parsing a block collection', this.marks.slice(-1)[0], \"expected <block end>, but found \" + token.id, token.start_mark);\n      }\n      token = this.get_token();\n      event = new events.SequenceEndEvent(token.start_mark, token.end_mark);\n      this.state = this.states.pop();\n      this.marks.pop();\n      return event;\n    };\n    Parser.prototype.parse_indentless_sequence_entry = function () {\n      var event, token;\n      if (this.check_token(tokens.BlockEntryToken)) {\n        token = this.get_token();\n        if (!this.check_token(tokens.BlockEntryToken, tokens.KeyToken, tokens.ValueToken, tokens.BlockEndToken)) {\n          this.states.push('parse_indentless_sequence_entry');\n          return this.parse_block_node();\n        } else {\n          this.state = 'parse_indentless_sequence_entry';\n          return this.process_empty_scalar(token.end_mark);\n        }\n      }\n      token = this.peek_token();\n      event = new events.SequenceEndEvent(token.start_mark, token.start_mark);\n      this.state = this.states.pop();\n      return event;\n    };\n    Parser.prototype.parse_block_mapping_first_key = function () {\n      var token;\n      token = this.get_token();\n      this.marks.push(token.start_mark);\n      return this.parse_block_mapping_key();\n    };\n    Parser.prototype.parse_block_mapping_key = function () {\n      var event, token;\n      if (this.check_token(tokens.KeyToken)) {\n        token = this.get_token();\n        if (!this.check_token(tokens.KeyToken, tokens.ValueToken, tokens.BlockEndToken)) {\n          this.states.push('parse_block_mapping_value');\n          return this.parse_block_node_or_indentless_sequence();\n        } else {\n          this.state = 'parse_block_mapping_value';\n          return this.process_empty_scalar(token.end_mark);\n        }\n      }\n      if (!this.check_token(tokens.BlockEndToken)) {\n        token = this.peek_token();\n        throw new exports.ParserError('while parsing a block mapping', this.marks.slice(-1)[0], \"expected <block end>, but found \" + token.id, token.start_mark);\n      }\n      token = this.get_token();\n      event = new events.MappingEndEvent(token.start_mark, token.end_mark);\n      this.state = this.states.pop();\n      this.marks.pop();\n      return event;\n    };\n    Parser.prototype.parse_block_mapping_value = function () {\n      var token;\n      if (this.check_token(tokens.ValueToken)) {\n        token = this.get_token();\n        if (!this.check_token(tokens.KeyToken, tokens.ValueToken, tokens.BlockEndToken)) {\n          this.states.push('parse_block_mapping_key');\n          return this.parse_block_node_or_indentless_sequence();\n        } else {\n          this.state = 'parse_block_mapping_key';\n          return this.process_empty_scalar(token.end_mark);\n        }\n      } else {\n        this.state = 'parse_block_mapping_key';\n        token = this.peek_token();\n        return this.process_empty_scalar(token.start_mark);\n      }\n    };\n    Parser.prototype.parse_flow_sequence_first_entry = function () {\n      var token;\n      token = this.get_token();\n      this.marks.push(token.start_mark);\n      return this.parse_flow_sequence_entry(true);\n    };\n    Parser.prototype.parse_flow_sequence_entry = function (first) {\n      var event, token;\n      if (first == null) {\n        first = false;\n      }\n      if (!this.check_token(tokens.FlowSequenceEndToken)) {\n        if (!first) {\n          if (this.check_token(tokens.FlowEntryToken)) {\n            this.get_token();\n          } else {\n            token = this.peek_token();\n            throw new exports.ParserError('while parsing a flow sequence', this.marks.slice(-1)[0], \"expected ',' or ']', but got \" + token.id, token.start_mark);\n          }\n        }\n        if (this.check_token(tokens.KeyToken)) {\n          token = this.peek_token();\n          event = new events.MappingStartEvent(null, null, true, token.start_mark, token.end_mark, true);\n          this.state = 'parse_flow_sequence_entry_mapping_key';\n          return event;\n        } else if (!this.check_token(tokens.FlowSequenceEndToken)) {\n          this.states.push('parse_flow_sequence_entry');\n          return this.parse_flow_node();\n        }\n      }\n      token = this.get_token();\n      event = new events.SequenceEndEvent(token.start_mark, token.end_mark);\n      this.state = this.states.pop();\n      this.marks.pop();\n      return event;\n    };\n    Parser.prototype.parse_flow_sequence_entry_mapping_key = function () {\n      var token;\n      token = this.get_token();\n      if (!this.check_token(tokens.ValueToken, tokens.FlowEntryToken, tokens.FlowSequenceEndToken)) {\n        this.states.push('parse_flow_sequence_entry_mapping_value');\n        return this.parse_flow_node();\n      } else {\n        this.state = 'parse_flow_sequence_entry_mapping_value';\n        return this.process_empty_scalar(token.end_mark);\n      }\n    };\n    Parser.prototype.parse_flow_sequence_entry_mapping_value = function () {\n      var token;\n      if (this.check_token(tokens.ValueToken)) {\n        token = this.get_token();\n        if (!this.check_token(tokens.FlowEntryToken, tokens.FlowSequenceEndToken)) {\n          this.states.push('parse_flow_sequence_entry_mapping_end');\n          return this.parse_flow_node();\n        } else {\n          this.state = 'parse_flow_sequence_entry_mapping_end';\n          return this.process_empty_scalar(token.end_mark);\n        }\n      } else {\n        this.state = 'parse_flow_sequence_entry_mapping_end';\n        token = this.peek_token();\n        return this.process_empty_scalar(token.start_mark);\n      }\n    };\n    Parser.prototype.parse_flow_sequence_entry_mapping_end = function () {\n      var token;\n      this.state = 'parse_flow_sequence_entry';\n      token = this.peek_token();\n      return new events.MappingEndEvent(token.start_mark, token.start_mark);\n    };\n    Parser.prototype.parse_flow_mapping_first_key = function () {\n      var token;\n      token = this.get_token();\n      this.marks.push(token.start_mark);\n      return this.parse_flow_mapping_key(true);\n    };\n    Parser.prototype.parse_flow_mapping_key = function (first) {\n      var event, token;\n      if (first == null) {\n        first = false;\n      }\n      if (!this.check_token(tokens.FlowMappingEndToken)) {\n        if (!first) {\n          if (this.check_token(tokens.FlowEntryToken)) {\n            this.get_token();\n          } else {\n            token = this.peek_token();\n            throw new exports.ParserError('while parsing a flow mapping', this.marks.slice(-1)[0], \"expected ',' or '}', but got \" + token.id, token.start_mark);\n          }\n        }\n        if (this.check_token(tokens.KeyToken)) {\n          token = this.get_token();\n          if (!this.check_token(tokens.ValueToken, tokens.FlowEntryToken, tokens.FlowMappingEndToken)) {\n            this.states.push('parse_flow_mapping_value');\n            return this.parse_flow_node();\n          } else {\n            this.state = 'parse_flow_mapping_value';\n            return this.process_empty_scalar(token.end_mark);\n          }\n        } else if (!this.check_token(tokens.FlowMappingEndToken)) {\n          this.states.push('parse_flow_mapping_empty_value');\n          return this.parse_flow_node();\n        }\n      }\n      token = this.get_token();\n      event = new events.MappingEndEvent(token.start_mark, token.end_mark);\n      this.state = this.states.pop();\n      this.marks.pop();\n      return event;\n    };\n    Parser.prototype.parse_flow_mapping_value = function () {\n      var token;\n      if (this.check_token(tokens.ValueToken)) {\n        token = this.get_token();\n        if (!this.check_token(tokens.FlowEntryToken, tokens.FlowMappingEndToken)) {\n          this.states.push('parse_flow_mapping_key');\n          return this.parse_flow_node();\n        } else {\n          this.state = 'parse_flow_mapping_key';\n          return this.process_empty_scalar(token.end_mark);\n        }\n      } else {\n        this.state = 'parse_flow_mapping_key';\n        token = this.peek_token();\n        return this.process_empty_scalar(token.start_mark);\n      }\n    };\n    Parser.prototype.parse_flow_mapping_empty_value = function () {\n      this.state = 'parse_flow_mapping_key';\n      return this.process_empty_scalar(this.peek_token().start_mark);\n    };\n    Parser.prototype.process_empty_scalar = function (mark) {\n      return new events.ScalarEvent(null, null, [true, false], '', mark, mark);\n    };\n    return Parser;\n  }();\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}