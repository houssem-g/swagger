{"ast":null,"code":"/*jshint maxlen: false*/\n\nvar validator = require(\"validator\");\nvar FormatValidators = {\n  \"date\": function (date) {\n    if (typeof date !== \"string\") {\n      return true;\n    }\n    // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n    var matches = /^([0-9]{4})-([0-9]{2})-([0-9]{2})$/.exec(date);\n    if (matches === null) {\n      return false;\n    }\n    // var year = matches[1];\n    // var month = matches[2];\n    // var day = matches[3];\n    if (matches[2] < \"01\" || matches[2] > \"12\" || matches[3] < \"01\" || matches[3] > \"31\") {\n      return false;\n    }\n    return true;\n  },\n  \"date-time\": function (dateTime) {\n    if (typeof dateTime !== \"string\") {\n      return true;\n    }\n    // date-time from http://tools.ietf.org/html/rfc3339#section-5.6\n    var s = dateTime.toLowerCase().split(\"t\");\n    if (!FormatValidators.date(s[0])) {\n      return false;\n    }\n    var matches = /^([0-9]{2}):([0-9]{2}):([0-9]{2})(.[0-9]+)?(z|([+-][0-9]{2}:[0-9]{2}))$/.exec(s[1]);\n    if (matches === null) {\n      return false;\n    }\n    // var hour = matches[1];\n    // var minute = matches[2];\n    // var second = matches[3];\n    // var fraction = matches[4];\n    // var timezone = matches[5];\n    if (matches[1] > \"23\" || matches[2] > \"59\" || matches[3] > \"59\") {\n      return false;\n    }\n    return true;\n  },\n  \"email\": function (email) {\n    if (typeof email !== \"string\") {\n      return true;\n    }\n    return validator.isEmail(email, {\n      \"require_tld\": true\n    });\n  },\n  \"hostname\": function (hostname) {\n    if (typeof hostname !== \"string\") {\n      return true;\n    }\n    /*\n        http://json-schema.org/latest/json-schema-validation.html#anchor114\n        A string instance is valid against this attribute if it is a valid\n        representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034].\n         http://tools.ietf.org/html/rfc1034#section-3.5\n         <digit> ::= any one of the ten digits 0 through 9\n        var digit = /[0-9]/;\n         <letter> ::= any one of the 52 alphabetic characters A through Z in upper case and a through z in lower case\n        var letter = /[a-zA-Z]/;\n         <let-dig> ::= <letter> | <digit>\n        var letDig = /[0-9a-zA-Z]/;\n         <let-dig-hyp> ::= <let-dig> | \"-\"\n        var letDigHyp = /[-0-9a-zA-Z]/;\n         <ldh-str> ::= <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n        var ldhStr = /[-0-9a-zA-Z]+/;\n         <label> ::= <letter> [ [ <ldh-str> ] <let-dig> ]\n        var label = /[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?/;\n         <subdomain> ::= <label> | <subdomain> \".\" <label>\n        var subdomain = /^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/;\n         <domain> ::= <subdomain> | \" \"\n        var domain = null;\n    */\n    var valid = /^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/.test(hostname);\n    if (valid) {\n      // the sum of all label octets and label lengths is limited to 255.\n      if (hostname.length > 255) {\n        return false;\n      }\n      // Each node has a label, which is zero to 63 octets in length\n      var labels = hostname.split(\".\");\n      for (var i = 0; i < labels.length; i++) {\n        if (labels[i].length > 63) {\n          return false;\n        }\n      }\n    }\n    return valid;\n  },\n  \"host-name\": function (hostname) {\n    return FormatValidators.hostname.call(this, hostname);\n  },\n  \"ipv4\": function (ipv4) {\n    if (typeof ipv4 !== \"string\") {\n      return true;\n    }\n    return validator.isIP(ipv4, 4);\n  },\n  \"ipv6\": function (ipv6) {\n    if (typeof ipv6 !== \"string\") {\n      return true;\n    }\n    return validator.isIP(ipv6, 6);\n  },\n  \"regex\": function (str) {\n    try {\n      RegExp(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  \"uri\": function (uri) {\n    if (this.options.strictUris) {\n      return FormatValidators[\"strict-uri\"].apply(this, arguments);\n    }\n    // https://github.com/zaggino/z-schema/issues/18\n    // RegExp from http://tools.ietf.org/html/rfc3986#appendix-B\n    return typeof uri !== \"string\" || RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\").test(uri);\n  },\n  \"strict-uri\": function (uri) {\n    return typeof uri !== \"string\" || validator.isURL(uri);\n  }\n};\nmodule.exports = FormatValidators;","map":null,"metadata":{},"sourceType":"script"}