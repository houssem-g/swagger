{"ast":null,"code":"import { format } from \"./isomorphic.node\";\n/**\n * Normalizes Ono options, accounting for defaults and optional options.\n */\nexport function normalizeOptions(options) {\n  options = options || {};\n  return {\n    concatMessages: options.concatMessages === undefined ? true : Boolean(options.concatMessages),\n    format: options.format === undefined ? format : typeof options.format === \"function\" ? options.format : false\n  };\n}\n/**\n * Normalizes the Ono arguments, accounting for defaults, options, and optional arguments.\n */\nexport function normalizeArgs(args, options) {\n  let originalError;\n  let props;\n  let formatArgs;\n  let message = \"\";\n  // Determine which arguments were actually specified\n  if (typeof args[0] === \"string\") {\n    formatArgs = args;\n  } else if (typeof args[1] === \"string\") {\n    if (args[0] instanceof Error) {\n      originalError = args[0];\n    } else {\n      props = args[0];\n    }\n    formatArgs = args.slice(1);\n  } else {\n    originalError = args[0];\n    props = args[1];\n    formatArgs = args.slice(2);\n  }\n  // If there are any format arguments, then format the error message\n  if (formatArgs.length > 0) {\n    if (options.format) {\n      message = options.format.apply(undefined, formatArgs);\n    } else {\n      message = formatArgs.join(\" \");\n    }\n  }\n  if (options.concatMessages && originalError && originalError.message) {\n    // The inner-error's message will be added to the new message\n    message += (message ? \" \\n\" : \"\") + originalError.message;\n  }\n  return {\n    originalError,\n    props,\n    message\n  };\n}","map":null,"metadata":{},"sourceType":"module"}