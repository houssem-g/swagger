{"ast":null,"code":"(function () {\n  var composer,\n    constructor,\n    parser,\n    reader,\n    resolver,\n    scanner,\n    util,\n    slice = [].slice;\n  util = require('./util');\n  reader = require('./reader');\n  scanner = require('./scanner');\n  parser = require('./parser');\n  composer = require('./composer');\n  resolver = require('./resolver');\n  constructor = require('./constructor');\n  this.make_loader = function (Reader, Scanner, Parser, Composer, Resolver, Constructor) {\n    var Loader, components;\n    if (Reader == null) {\n      Reader = reader.Reader;\n    }\n    if (Scanner == null) {\n      Scanner = scanner.Scanner;\n    }\n    if (Parser == null) {\n      Parser = parser.Parser;\n    }\n    if (Composer == null) {\n      Composer = composer.Composer;\n    }\n    if (Resolver == null) {\n      Resolver = resolver.Resolver;\n    }\n    if (Constructor == null) {\n      Constructor = constructor.Constructor;\n    }\n    components = [Reader, Scanner, Parser, Composer, Resolver, Constructor];\n    return Loader = function () {\n      var component;\n      util.extend.apply(util, [Loader.prototype].concat(slice.call(function () {\n        var i, len, results;\n        results = [];\n        for (i = 0, len = components.length; i < len; i++) {\n          component = components[i];\n          results.push(component.prototype);\n        }\n        return results;\n      }())));\n      function Loader(stream) {\n        var i, len, ref;\n        components[0].call(this, stream);\n        ref = components.slice(1);\n        for (i = 0, len = ref.length; i < len; i++) {\n          component = ref[i];\n          component.call(this);\n        }\n      }\n      return Loader;\n    }();\n  };\n  this.Loader = this.make_loader();\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}