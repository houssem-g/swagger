{"ast":null,"code":"(function () {\n  var Mark,\n    YAMLError,\n    ref,\n    extend = function (child, parent) {\n      for (var key in parent) {\n        if (hasProp.call(parent, key)) child[key] = parent[key];\n      }\n      function ctor() {\n        this.constructor = child;\n      }\n      ctor.prototype = parent.prototype;\n      child.prototype = new ctor();\n      child.__super__ = parent.prototype;\n      return child;\n    },\n    hasProp = {}.hasOwnProperty,\n    indexOf = [].indexOf || function (item) {\n      for (var i = 0, l = this.length; i < l; i++) {\n        if (i in this && this[i] === item) return i;\n      }\n      return -1;\n    };\n  ref = require('./errors'), Mark = ref.Mark, YAMLError = ref.YAMLError;\n  this.ReaderError = function (superClass) {\n    extend(ReaderError, superClass);\n    function ReaderError(position1, character1, reason) {\n      this.position = position1;\n      this.character = character1;\n      this.reason = reason;\n      ReaderError.__super__.constructor.call(this);\n    }\n    ReaderError.prototype.toString = function () {\n      return \"unacceptable character #\" + this.character.charCodeAt(0).toString(16) + \": \" + this.reason + \"\\n  position \" + this.position;\n    };\n    return ReaderError;\n  }(YAMLError);\n\n  /*\n  Reader:\n    checks if characters are within the allowed range\n    add '\\x00' to the end\n   */\n\n  this.Reader = function () {\n    var NON_PRINTABLE;\n    NON_PRINTABLE = /[^\\x09\\x0A\\x0D\\x20-\\x7E\\x85\\xA0-\\uFFFD]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n    function Reader(string) {\n      this.string = string;\n      this.line = 0;\n      this.column = 0;\n      this.index = 0;\n      this.check_printable();\n      this.string += '\\x00';\n    }\n    Reader.prototype.peek = function (index) {\n      if (index == null) {\n        index = 0;\n      }\n      return this.string[this.index + index];\n    };\n    Reader.prototype.prefix = function (length) {\n      if (length == null) {\n        length = 1;\n      }\n      return this.string.slice(this.index, this.index + length);\n    };\n    Reader.prototype.forward = function (length) {\n      var char, results;\n      if (length == null) {\n        length = 1;\n      }\n      results = [];\n      while (length) {\n        char = this.string[this.index];\n        this.index++;\n        if (indexOf.call('\\n\\x85\\u2082\\u2029', char) >= 0 || char === '\\r' && this.string[this.index] !== '\\n') {\n          this.line++;\n          this.column = 0;\n        } else {\n          this.column++;\n        }\n        results.push(length--);\n      }\n      return results;\n    };\n    Reader.prototype.get_mark = function () {\n      return new Mark(this.line, this.column, this.string, this.index);\n    };\n    Reader.prototype.check_printable = function () {\n      var character, match, position;\n      match = NON_PRINTABLE.exec(this.string);\n      if (match) {\n        character = match[0];\n        position = this.string.length - this.index + match.index;\n        throw new exports.ReaderError(position, character, 'special characters are not allowed');\n      }\n    };\n    return Reader;\n  }();\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}