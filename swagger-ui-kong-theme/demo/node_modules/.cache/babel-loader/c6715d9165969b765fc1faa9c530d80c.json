{"ast":null,"code":"\"use strict\";\n\nconst validateSchema = require(\"./validators/schema\");\nconst validateSpec = require(\"./validators/spec\");\nconst normalizeArgs = require(\"json-schema-ref-parser/lib/normalize-args\");\nconst util = require(\"./util\");\nconst Options = require(\"./options\");\nconst maybe = require(\"call-me-maybe\");\nconst {\n  ono\n} = require(\"ono\");\nconst $RefParser = require(\"json-schema-ref-parser\");\nconst dereference = require(\"json-schema-ref-parser/lib/dereference\");\nmodule.exports = SwaggerParser;\n\n/**\n * This class parses a Swagger 2.0 or 3.0 API, resolves its JSON references and their resolved values,\n * and provides methods for traversing, dereferencing, and validating the API.\n *\n * @constructor\n * @extends $RefParser\n */\nfunction SwaggerParser() {\n  $RefParser.apply(this, arguments);\n}\nutil.inherits(SwaggerParser, $RefParser);\nSwaggerParser.YAML = $RefParser.YAML;\nSwaggerParser.parse = $RefParser.parse;\nSwaggerParser.resolve = $RefParser.resolve;\nSwaggerParser.bundle = $RefParser.bundle;\nSwaggerParser.dereference = $RefParser.dereference;\n\n/**\n * Alias {@link $RefParser#schema} as {@link SwaggerParser#api}\n */\nObject.defineProperty(SwaggerParser.prototype, \"api\", {\n  configurable: true,\n  enumerable: true,\n  get() {\n    return this.schema;\n  }\n});\n\n/**\n * Parses the given Swagger API.\n * This method does not resolve any JSON references.\n * It just reads a single file in JSON or YAML format, and parse it as a JavaScript object.\n *\n * @param {string} [path] - The file path or URL of the JSON schema\n * @param {object} [api] - The Swagger API object. This object will be used instead of reading from `path`.\n * @param {ParserOptions} [options] - Options that determine how the API is parsed\n * @param {function} [callback] - An error-first callback. The second parameter is the parsed API object.\n * @returns {Promise} - The returned promise resolves with the parsed API object.\n */\nSwaggerParser.prototype.parse = async function (path, api, options, callback) {\n  let args = normalizeArgs(arguments);\n  args.options = new Options(args.options);\n  try {\n    let schema = await $RefParser.prototype.parse.call(this, args.path, args.schema, args.options);\n    if (schema.swagger) {\n      // Verify that the parsed object is a Swagger API\n      if (schema.swagger === undefined || schema.info === undefined || schema.paths === undefined) {\n        throw ono.syntax(`${args.path || args.schema} is not a valid Swagger API definition`);\n      } else if (typeof schema.swagger === \"number\") {\n        // This is a very common mistake, so give a helpful error message\n        throw ono.syntax('Swagger version number must be a string (e.g. \"2.0\") not a number.');\n      } else if (typeof schema.info.version === \"number\") {\n        // This is a very common mistake, so give a helpful error message\n        throw ono.syntax('API version number must be a string (e.g. \"1.0.0\") not a number.');\n      } else if (schema.swagger !== \"2.0\") {\n        throw ono.syntax(`Unrecognized Swagger version: ${schema.swagger}. Expected 2.0`);\n      }\n    } else {\n      let supportedVersions = [\"3.0.0\", \"3.0.1\", \"3.0.2\"];\n\n      // Verify that the parsed object is a Openapi API\n      if (schema.openapi === undefined || schema.info === undefined || schema.paths === undefined) {\n        throw ono.syntax(`${args.path || args.schema} is not a valid Openapi API definition`);\n      } else if (typeof schema.openapi === \"number\") {\n        // This is a very common mistake, so give a helpful error message\n        throw ono.syntax('Openapi version number must be a string (e.g. \"3.0.0\") not a number.');\n      } else if (typeof schema.info.version === \"number\") {\n        // This is a very common mistake, so give a helpful error message\n        throw ono.syntax('API version number must be a string (e.g. \"1.0.0\") not a number.');\n      } else if (supportedVersions.indexOf(schema.openapi) === -1) {\n        throw ono.syntax(`Unsupported OpenAPI version: ${schema.openapi}. ` + `Swagger Parser only supports versions ${supportedVersions.join(\", \")}`);\n      }\n    }\n\n    // Looks good!\n    return maybe(args.callback, Promise.resolve(schema));\n  } catch (err) {\n    return maybe(args.callback, Promise.reject(err));\n  }\n};\n\n/**\n * Parses, dereferences, and validates the given Swagger API.\n * Depending on the options, validation can include JSON Schema validation and/or Swagger Spec validation.\n *\n * @param {string} [path] - The file path or URL of the JSON schema\n * @param {object} [api] - The Swagger API object. This object will be used instead of reading from `path`.\n * @param {ParserOptions} [options] - Options that determine how the API is parsed, dereferenced, and validated\n * @param {function} [callback] - An error-first callback. The second parameter is the parsed API object.\n * @returns {Promise} - The returned promise resolves with the parsed API object.\n */\nSwaggerParser.validate = function (path, api, options, callback) {\n  let Class = this; // eslint-disable-line consistent-this\n  let instance = new Class();\n  return instance.validate.apply(instance, arguments);\n};\n\n/**\n * Parses, dereferences, and validates the given Swagger API.\n * Depending on the options, validation can include JSON Schema validation and/or Swagger Spec validation.\n *\n * @param {string} [path] - The file path or URL of the JSON schema\n * @param {object} [api] - The Swagger API object. This object will be used instead of reading from `path`.\n * @param {ParserOptions} [options] - Options that determine how the API is parsed, dereferenced, and validated\n * @param {function} [callback] - An error-first callback. The second parameter is the parsed API object.\n * @returns {Promise} - The returned promise resolves with the parsed API object.\n */\nSwaggerParser.prototype.validate = async function (path, api, options, callback) {\n  let me = this;\n  let args = normalizeArgs(arguments);\n  args.options = new Options(args.options);\n\n  // ZSchema doesn't support circular objects, so don't dereference circular $refs yet\n  // (see https://github.com/zaggino/z-schema/issues/137)\n  let circular$RefOption = args.options.dereference.circular;\n  args.options.validate.schema && (args.options.dereference.circular = \"ignore\");\n  try {\n    await this.dereference(args.path, args.schema, args.options);\n\n    // Restore the original options, now that we're done dereferencing\n    args.options.dereference.circular = circular$RefOption;\n    if (args.options.validate.schema) {\n      // Validate the API against the Swagger schema\n      // NOTE: This is safe to do, because we haven't dereferenced circular $refs yet\n      validateSchema(me.api);\n      if (me.$refs.circular) {\n        if (circular$RefOption === true) {\n          // The API has circular references,\n          // so we need to do a second-pass to fully-dereference it\n          dereference(me, args.options);\n        } else if (circular$RefOption === false) {\n          // The API has circular references, and they're not allowed, so throw an error\n          throw ono.reference(\"The API contains circular references\");\n        }\n      }\n    }\n    if (args.options.validate.spec) {\n      // Validate the API against the Swagger spec\n      validateSpec(me.api);\n    }\n    return maybe(args.callback, Promise.resolve(me.schema));\n  } catch (err) {\n    return maybe(args.callback, Promise.reject(err));\n  }\n};\n\n/**\n * The Swagger object\n * https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#swagger-object\n *\n * @typedef {{swagger: string, info: {}, paths: {}}} SwaggerObject\n */","map":null,"metadata":{},"sourceType":"script"}