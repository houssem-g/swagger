{"ast":null,"code":"import { extendError } from \"./extend-error\";\nimport { normalizeArgs, normalizeOptions } from \"./normalize\";\nimport { toJSON as errorToJSON } from \"./to-json\";\nconst constructor = Ono;\nexport { constructor as Ono };\n/**\n * Returns an object containing all properties of the given Error object,\n * which can be used with `JSON.stringify()`.\n */\nOno.toJSON = function toJSON(error) {\n  return errorToJSON.call(error);\n};\n/**\n * Creates an `Ono` instance for a specifc error type.\n */\n// tslint:disable-next-line: variable-name\nfunction Ono(ErrorConstructor, options) {\n  options = normalizeOptions(options);\n  function ono() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    let {\n      originalError,\n      props,\n      message\n    } = normalizeArgs(args, options);\n    // Create a new error of the specified type\n    let newError = new ErrorConstructor(message);\n    // Extend the error with the properties of the original error and the `props` object\n    extendError(newError, originalError, props);\n    return newError;\n  }\n  ono[Symbol.species] = ErrorConstructor;\n  return ono;\n}","map":null,"metadata":{},"sourceType":"module"}